// Code generated by protoc-gen-go. DO NOT EDIT.
// source: storage.proto

package storage

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Item struct {
	Keygroup             string   `protobuf:"bytes,1,opt,name=keygroup,proto3" json:"keygroup,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Data                 string   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Item) Reset()         { *m = Item{} }
func (m *Item) String() string { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()    {}
func (*Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{0}
}

func (m *Item) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Item.Unmarshal(m, b)
}
func (m *Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Item.Marshal(b, m, deterministic)
}
func (m *Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Item.Merge(m, src)
}
func (m *Item) XXX_Size() int {
	return xxx_messageInfo_Item.Size(m)
}
func (m *Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Item proto.InternalMessageInfo

func (m *Item) GetKeygroup() string {
	if m != nil {
		return m.Keygroup
	}
	return ""
}

func (m *Item) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Item) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// A Key uniquely identifies data. In our case it contains a keygroup and the id
type Key struct {
	Keygroup             string   `protobuf:"bytes,1,opt,name=keygroup,proto3" json:"keygroup,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Key) Reset()         { *m = Key{} }
func (m *Key) String() string { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()    {}
func (*Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{1}
}

func (m *Key) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Key.Unmarshal(m, b)
}
func (m *Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Key.Marshal(b, m, deterministic)
}
func (m *Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Key.Merge(m, src)
}
func (m *Key) XXX_Size() int {
	return xxx_messageInfo_Key.Size(m)
}
func (m *Key) XXX_DiscardUnknown() {
	xxx_messageInfo_Key.DiscardUnknown(m)
}

var xxx_messageInfo_Key proto.InternalMessageInfo

func (m *Key) GetKeygroup() string {
	if m != nil {
		return m.Keygroup
	}
	return ""
}

func (m *Key) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Data struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{2}
}

func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type Keygroup struct {
	Keygroup             string   `protobuf:"bytes,1,opt,name=keygroup,proto3" json:"keygroup,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Keygroup) Reset()         { *m = Keygroup{} }
func (m *Keygroup) String() string { return proto.CompactTextString(m) }
func (*Keygroup) ProtoMessage()    {}
func (*Keygroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{3}
}

func (m *Keygroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Keygroup.Unmarshal(m, b)
}
func (m *Keygroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Keygroup.Marshal(b, m, deterministic)
}
func (m *Keygroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Keygroup.Merge(m, src)
}
func (m *Keygroup) XXX_Size() int {
	return xxx_messageInfo_Keygroup.Size(m)
}
func (m *Keygroup) XXX_DiscardUnknown() {
	xxx_messageInfo_Keygroup.DiscardUnknown(m)
}

var xxx_messageInfo_Keygroup proto.InternalMessageInfo

func (m *Keygroup) GetKeygroup() string {
	if m != nil {
		return m.Keygroup
	}
	return ""
}

type Response struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{4}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Item)(nil), "Item")
	proto.RegisterType((*Key)(nil), "Key")
	proto.RegisterType((*Data)(nil), "Data")
	proto.RegisterType((*Keygroup)(nil), "Keygroup")
	proto.RegisterType((*Response)(nil), "Response")
}

func init() { proto.RegisterFile("storage.proto", fileDescriptor_0d2c4ccf1453ffdb) }

var fileDescriptor_0d2c4ccf1453ffdb = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0xf3, 0xaf, 0x69, 0x32, 0x60, 0x0f, 0x03, 0x42, 0x48, 0x05, 0x65, 0x0f, 0xd2, 0xd3,
	0xe2, 0x9f, 0xbb, 0x20, 0x46, 0xa1, 0xe4, 0x16, 0xf0, 0x01, 0xb6, 0xcd, 0x10, 0x82, 0xa9, 0x09,
	0x99, 0x2d, 0x98, 0x57, 0xf0, 0xa9, 0x25, 0xdb, 0x26, 0x44, 0x11, 0xa5, 0xb7, 0x9d, 0xef, 0xfb,
	0xf6, 0x37, 0xb3, 0xc3, 0xc2, 0x19, 0xeb, 0xba, 0x55, 0x05, 0xc9, 0xa6, 0xad, 0x75, 0x2d, 0x5e,
	0xc0, 0x5b, 0x6b, 0xda, 0x61, 0x0c, 0xc1, 0x1b, 0x75, 0x45, 0x5b, 0xef, 0x9b, 0xc8, 0xbe, 0xb2,
	0x57, 0x61, 0x36, 0xd6, 0xb8, 0x00, 0xa7, 0xcc, 0x23, 0xc7, 0xa8, 0x4e, 0x99, 0x23, 0x82, 0x97,
	0x2b, 0xad, 0x22, 0xd7, 0x28, 0xe6, 0x2c, 0x6e, 0xc1, 0x4d, 0xa9, 0x3b, 0x05, 0x23, 0x62, 0xf0,
	0x12, 0xa5, 0xd5, 0x88, 0xb3, 0x27, 0xb8, 0x6b, 0x08, 0xd2, 0xe1, 0xde, 0x1f, 0x4c, 0xf1, 0x00,
	0x41, 0x46, 0xdc, 0xd4, 0xef, 0x4c, 0x18, 0xc1, 0x9c, 0xf7, 0xdb, 0x2d, 0x31, 0x9b, 0x58, 0x90,
	0x0d, 0x65, 0xef, 0xec, 0x88, 0x59, 0x15, 0x74, 0x6c, 0x3f, 0x94, 0x77, 0x9f, 0x0e, 0x04, 0xfd,
	0x10, 0x1b, 0xc5, 0x84, 0x17, 0xe0, 0xbf, 0x36, 0xb9, 0xd2, 0x84, 0x33, 0xd9, 0x2f, 0x25, 0x0e,
	0xe5, 0x00, 0x17, 0x16, 0x2e, 0xc1, 0x4f, 0xa8, 0x22, 0x4d, 0xe8, 0xc9, 0x94, 0xba, 0xef, 0xe6,
	0x39, 0x78, 0x19, 0xa9, 0xfc, 0x68, 0xcd, 0x64, 0xcf, 0x14, 0x16, 0x5e, 0xc2, 0xbc, 0x97, 0x1f,
	0xab, 0x0a, 0x43, 0x39, 0x3c, 0x28, 0x3e, 0xd0, 0x85, 0x75, 0x63, 0x63, 0x0c, 0xee, 0x3a, 0xe1,
	0xa9, 0x69, 0x08, 0xc6, 0x5b, 0x82, 0xff, 0xfc, 0x51, 0xb2, 0xe6, 0xdf, 0x1a, 0xae, 0x60, 0xf1,
	0xd4, 0x92, 0xd2, 0x34, 0xae, 0x69, 0xc2, 0xf8, 0x99, 0x3c, 0xcc, 0xfd, 0x5f, 0x72, 0xe3, 0x9b,
	0x2f, 0x71, 0xff, 0x15, 0x00, 0x00, 0xff, 0xff, 0xdb, 0xc6, 0x3a, 0xa5, 0x23, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DatabaseClient is the client API for Database service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DatabaseClient interface {
	Update(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Response, error)
	Read(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Data, error)
	ReadAll(ctx context.Context, in *Keygroup, opts ...grpc.CallOption) (Database_ReadAllClient, error)
	IDs(ctx context.Context, in *Keygroup, opts ...grpc.CallOption) (Database_IDsClient, error)
	Exists(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Response, error)
	CreateKeygroup(ctx context.Context, in *Keygroup, opts ...grpc.CallOption) (*Response, error)
	DeleteKeygroup(ctx context.Context, in *Keygroup, opts ...grpc.CallOption) (*Response, error)
}

type databaseClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseClient(cc grpc.ClientConnInterface) DatabaseClient {
	return &databaseClient{cc}
}

func (c *databaseClient) Update(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Database/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) Delete(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Database/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) Read(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/Database/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) ReadAll(ctx context.Context, in *Keygroup, opts ...grpc.CallOption) (Database_ReadAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Database_serviceDesc.Streams[0], "/Database/ReadAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &databaseReadAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Database_ReadAllClient interface {
	Recv() (*Item, error)
	grpc.ClientStream
}

type databaseReadAllClient struct {
	grpc.ClientStream
}

func (x *databaseReadAllClient) Recv() (*Item, error) {
	m := new(Item)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *databaseClient) IDs(ctx context.Context, in *Keygroup, opts ...grpc.CallOption) (Database_IDsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Database_serviceDesc.Streams[1], "/Database/IDs", opts...)
	if err != nil {
		return nil, err
	}
	x := &databaseIDsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Database_IDsClient interface {
	Recv() (*Key, error)
	grpc.ClientStream
}

type databaseIDsClient struct {
	grpc.ClientStream
}

func (x *databaseIDsClient) Recv() (*Key, error) {
	m := new(Key)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *databaseClient) Exists(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Database/Exists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) CreateKeygroup(ctx context.Context, in *Keygroup, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Database/CreateKeygroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) DeleteKeygroup(ctx context.Context, in *Keygroup, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Database/DeleteKeygroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseServer is the server API for Database service.
type DatabaseServer interface {
	Update(context.Context, *Item) (*Response, error)
	Delete(context.Context, *Key) (*Response, error)
	Read(context.Context, *Key) (*Data, error)
	ReadAll(*Keygroup, Database_ReadAllServer) error
	IDs(*Keygroup, Database_IDsServer) error
	Exists(context.Context, *Key) (*Response, error)
	CreateKeygroup(context.Context, *Keygroup) (*Response, error)
	DeleteKeygroup(context.Context, *Keygroup) (*Response, error)
}

// UnimplementedDatabaseServer can be embedded to have forward compatible implementations.
type UnimplementedDatabaseServer struct {
}

func (*UnimplementedDatabaseServer) Update(ctx context.Context, req *Item) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedDatabaseServer) Delete(ctx context.Context, req *Key) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedDatabaseServer) Read(ctx context.Context, req *Key) (*Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedDatabaseServer) ReadAll(req *Keygroup, srv Database_ReadAllServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadAll not implemented")
}
func (*UnimplementedDatabaseServer) IDs(req *Keygroup, srv Database_IDsServer) error {
	return status.Errorf(codes.Unimplemented, "method IDs not implemented")
}
func (*UnimplementedDatabaseServer) Exists(ctx context.Context, req *Key) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (*UnimplementedDatabaseServer) CreateKeygroup(ctx context.Context, req *Keygroup) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeygroup not implemented")
}
func (*UnimplementedDatabaseServer) DeleteKeygroup(ctx context.Context, req *Keygroup) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKeygroup not implemented")
}

func RegisterDatabaseServer(s *grpc.Server, srv DatabaseServer) {
	s.RegisterService(&_Database_serviceDesc, srv)
}

func _Database_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Database/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).Update(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Database/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).Delete(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Database/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).Read(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_ReadAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Keygroup)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DatabaseServer).ReadAll(m, &databaseReadAllServer{stream})
}

type Database_ReadAllServer interface {
	Send(*Item) error
	grpc.ServerStream
}

type databaseReadAllServer struct {
	grpc.ServerStream
}

func (x *databaseReadAllServer) Send(m *Item) error {
	return x.ServerStream.SendMsg(m)
}

func _Database_IDs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Keygroup)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DatabaseServer).IDs(m, &databaseIDsServer{stream})
}

type Database_IDsServer interface {
	Send(*Key) error
	grpc.ServerStream
}

type databaseIDsServer struct {
	grpc.ServerStream
}

func (x *databaseIDsServer) Send(m *Key) error {
	return x.ServerStream.SendMsg(m)
}

func _Database_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Database/Exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).Exists(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_CreateKeygroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Keygroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).CreateKeygroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Database/CreateKeygroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).CreateKeygroup(ctx, req.(*Keygroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_DeleteKeygroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Keygroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).DeleteKeygroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Database/DeleteKeygroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).DeleteKeygroup(ctx, req.(*Keygroup))
	}
	return interceptor(ctx, in, info, handler)
}

var _Database_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Database",
	HandlerType: (*DatabaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _Database_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Database_Delete_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Database_Read_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _Database_Exists_Handler,
		},
		{
			MethodName: "CreateKeygroup",
			Handler:    _Database_CreateKeygroup_Handler,
		},
		{
			MethodName: "DeleteKeygroup",
			Handler:    _Database_DeleteKeygroup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadAll",
			Handler:       _Database_ReadAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "IDs",
			Handler:       _Database_IDs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "storage.proto",
}
