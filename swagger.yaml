swagger: "2.0"
info:
  description: "FReD - Fog Replicated Data Storage."
  version: "1.0.0"
  title: "FReD"
  contact:
    email: "tp@mcc.tu-berlin.de"
  license:
    name: "MIT"
    url: "https://mit-license.org/"
host: "[node-id].nodes.mcc-f.red"
basePath: "/v0"
tags:
- name: "keygroup"
  description: "Contains all keygroup"
- name: "data"
  description: "All data of a particular keygroup"
schemes:
- "https"
- "http"
paths:
  /seed:
    post:
      tags:
        - "seed"
      summary: "Seeds the Node"
      description: "Seeds the Node so replication can begin."
      responses:
        200:
          description: OK
        409:
          description: Conflict, node is seeded already
      parameters:
        - name: "body"
          in: "body"
          description: "Seed, contains public IP address and ID for the node."
          required: true
          schema:
            $ref: "#/definitions/Seed"

  /keygroup/{group_id}:
    post:
      tags:
      - "keygroup"
      summary: "Create a new Keygroup"
      description: "Creates a new Keygroup with the name `group_id` if it does not exist already."
      responses:
        200:
          description: OK
        409:
          description: Conflict, Keygroup exists already
      parameters:
      - name: "group_id"
        in: "path"
        description: "Name of Keygroup"
        required: true
        type: "string"
        format: "string"
    
    delete:
      tags:
      - "keygroup"
      summary: "Delete an existing Keygroup"
      description: "Deletes the Keygroup with the name `group_id` if it exists."
      responses:
        200:
          description: OK
        404:
          description: Keygroup not found
      parameters:
      - name: "group_id"
        in: "path"
        description: "Name of Keygroup"
        required: true
        type: "string"
        format: "string"

  /keygroup/{group_id}/replica:
    get:
      tags:
        - "keygroup"
      summary: "Gets all Replica Nodes for a Keygroup"
      description: "Returns replica nodes for a Keygroup with the name `group_id` if it does not exist already."
      responses:
        200:
          description: OK
        404:
          description: Keygroup not Found
      parameters:
        - name: "group_id"
          in: "path"
          description: "Name of Keygroup"
          required: true
          type: "string"
          format: "string"

  /keygroup/{group_id}/replica/{node_id}:
    post:
      tags:
        - "keygroup"
      summary: "Create a new Replica node for a Keygroup"
      description: "Registers the node with the name `node_id` as a replica node for a Keygroup with the name `group_id` if it does not exist already."
      responses:
        200:
          description: OK
        409:
          description: Conflict, Replica Node or Keygroup exists already
      parameters:
        - name: "group_id"
          in: "path"
          description: "Name of Keygroup"
          required: true
          type: "string"
          format: "string"
        - name: "node_id"
          in: "path"
          description: "Name of Replica Node"
          required: true
          type: "string"
          format: "string"

    delete:
      tags:
        - "keygroup"
      summary: "Remove an existing replica node for a Keygroup"
      description: "De-registers the node with the name {node_id} as a replica node for the Keygroup with the name `group_id` if it exists."
      responses:
        200:
          description: OK
        404:
          description: Replica Node or Keygroup not found
      parameters:
        - name: "group_id"
          in: "path"
          description: "Name of Keygroup"
          required: true
          type: "string"
          format: "string"
        - name: "node_id"
          in: "path"
          description: "Name of Replica Node"
          required: true
          type: "string"
          format: "string"

  /keygroup/{group_id}/data/{item_id}:
    get:
      tags:
      - "data"
      summary: "Gets an item value from a Keygroup"
      description: "Gets the value of item `item_id` in Keygroup with the name `group_id`."
      responses:
        200:
          description: OK
        404:
          description: The item ID or Keygroup could not be found
      parameters:
      - name: "group_id"
        in: "path"
        description: "Name of Keygroup"
        required: true
        type: "string"
        format: "string"
      - name: "item_id"
        in: "path"
        description: "ID of item to update"
        required: true
        type: "string"
        format: "string"

    put:
      tags:
      - "data"
      summary: "Sets an item value in a Keygroup"
      description: "Sets the value of item `item_id` in Keygroup with the name `group_id` to the provided value."
      responses:
        200:
          description: OK
        400:
          description: Bad Request, the request is malformed
        409:
          description: Conflict, item could not be updated
      parameters:
      - name: "group_id"
        in: "path"
        description: "Name of Keygroup"
        required: true
        type: "string"
        format: "string"
      - name: "item_id"
        in: "path"
        description: "ID of item to update"
        required: true
        type: "string"
        format: "string"
      - name: "body"
        in: "body"
        description: "Data that should be saved in this item."
        required: true
        schema:
          $ref: "#/definitions/Item"

    delete:
      tags:
      - "data"
      summary: "Deletes an item value from a Keygroup"
      description: "Deletes the value of item `item_id` in Keygroup with the name `group_id`."
      responses:
        200:
          description: OK
        404:
          description: The item ID or Keygroup could not be found
      parameters:
      - name: "group_id"
        in: "path"
        description: "Name of Keygroup"
        required: true
        type: "string"
        format: "string"
      - name: "item_id"
        in: "path"
        description: "ID of item to update"
        required: true
        type: "string"
        format: "string"

  /replica:
    get:
      tags:
        - "replication"
      summary: "Gets all Replica Nodes"
      description: "Returns all known replica nodes."
      responses:
        200:
          description: OK
        404:
          description: Keygroup not Found

    post:
      tags:
        - "replication"
      summary: "Register a new Replica Node"
      description: "Creates a new replica node if it does not exist already or updates existing data."
      responses:
        200:
          description: OK
        400:
          description: Bad Request, post body does not mach definition
        409:
          description: Conflict, Replica Node exists already
      parameters:
        - name: "body"
          in: "body"
          description: "ID, Address and Port of Replica Node."
          required: true
          schema:
            $ref: "#/definitions/Replica"

  /replica/{node_id}:
    delete:
      tags:
        - "replication"
      summary: "Remove an existing replica node"
      description: "Removes the replica node `node_id` if it exists."
      responses:
        200:
          description: OK
        404:
          description: Replica Node not found
      parameters:
        - name: "node_id"
          in: "path"
          description: "ID of pet to return"
          required: true
          type: "string"
          format: "string"

definitions:
    Item:
      type: "object"
      required:
      - "data"
      properties:
        data:
          type: "string"
          format: "utf-8"
    Replica:
      type: "object"
      required:
        - "nodes"
      properties:
        nodes:
          items:
            $ref: "#/definitions/Node"
    Seed:
      type: "object"
      required:
        - "id"
        - "addr"
      properties:
        id:
          type: "string"
          format: "utf-8"
        addr:
          type: "string"
          format: "utf-8"
    Node:
      type: "object"
      required:
        - "id"
        - "addr"
        - "port"
      properties:
        id:
          type: "string"
          format: "utf-8"
        addr:
          type: "string"
          format: "utf-8"
        port:
          type: "integer"
          format: "utf-8"