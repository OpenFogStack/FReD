swagger: "2.0"
info:
  description: "FReD - Fog Replicated Data Storage."
  version: "0.0.3"
  title: "FReD"
  contact:
    email: "tp@mcc.tu-berlin.de"
  license:
    name: "MIT"
    url: "https://mit-license.org/"
host: "[node-id].nodes.mcc-f.red"
basePath: "/v0"
tags:
  - name: "keygroup"
    description: "contains all keygroups"
  - name: "data"
    description: "all data of a particular keygroup"
  - name: "seed"
    description: "set up a new P2P network of FReD nodes"
  - name: "replication"
    description: "manage replication between nodes"
schemes:
  - "https"
  - "http"
paths:
  /keygroup/{group_id}:
    post:
      tags:
        - "keygroup"
      summary: "Create a new Keygroup"
      description: "Creates a new Keygroup with the name `group_id` if it does not exist already."
      produces:
        - "text/plain"
        - "application/json"
      responses:
        200:
          description: OK
        409:
          description: Conflict, Keygroup exists already
          schema:
            $ref: "#/definitions/Error"
      parameters:
        - in: "path"
          name: "group_id"
          description: "Name of Keygroup"
          required: true
          type: "string"
          format: "string"

    delete:
      tags:
        - "keygroup"
      summary: "Delete an existing Keygroup"
      description: "Deletes the Keygroup with the name `group_id` if it exists."
      produces:
        - "text/plain"
        - "application/json"
      responses:
        200:
          description: OK
        404:
          description: Keygroup not found
          schema:
            $ref: "#/definitions/Error"
      parameters:
        - in: "path"
          name: "group_id"
          description: "Name of Keygroup"
          required: true
          type: "string"
          format: "string"

  /keygroup/{group_id}/replica:
    get:
      tags:
        - "keygroup"
        - "replication"
      summary: "Gets all Replica Nodes for a Keygroup"
      description: "Returns replica nodes for a Keygroup with the name `group_id` if it does not exist already."
      produces:
        - "text/plain"
        - "application/json"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/ReplicationList"
        404:
          description: Keygroup not Found
          schema:
            $ref: "#/definitions/Error"
      parameters:
        - in: "path"
          name: "group_id"
          description: "Name of Keygroup"
          required: true
          type: "string"
          format: "string"

  /keygroup/{group_id}/replica/{node_id}:
    post:
      tags:
        - "keygroup"
        - "replication"
      summary: "Create a new Replica node for a Keygroup"
      description: "Registers the node with the name `node_id` as a replica node for a Keygroup with the name `group_id` if it does not exist already."
      produces:
        - "text/plain"
        - "application/json"
      responses:
        200:
          description: OK
        409:
          description: Conflict, Replica Node or Keygroup exists already
          schema:
            $ref: "#/definitions/Error"
      parameters:
        - in: "path"
          name: "group_id"
          description: "Name of Keygroup"
          required: true
          type: "string"
          format: "string"
        - in: "path"
          name: "node_id"
          description: "Name of Replica Node"
          required: true
          type: "string"
          format: "string"

    delete:
      tags:
        - "keygroup"
        - "replication"
      summary: "Remove an existing replica node for a Keygroup"
      description: "De-registers the node with the name {node_id} as a replica node for the Keygroup with the name `group_id` if it exists."
      produces:
        - "text/plain"
        - "application/json"
      responses:
        200:
          description: OK
        404:
          description: Replica Node or Keygroup not found
          schema:
            $ref: "#/definitions/Error"
      parameters:
        - in: "path"
          name: "group_id"
          description: "Name of Keygroup"
          required: true
          type: "string"
          format: "string"
        - in: "path"
          name: "node_id"
          description: "Name of Replica Node"
          required: true
          type: "string"
          format: "string"

  /keygroup/{group_id}/data/{item_id}:
    get:
      tags:
        - "data"
      summary: "Gets an item value from a Keygroup"
      description: "Gets the value of item `item_id` in Keygroup with the name `group_id`."
      produces:
        - "application/json"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Item"
        404:
          description: The item ID or Keygroup could not be found
          schema:
            $ref: "#/definitions/Error"
      parameters:
        - in: "path"
          name: "group_id"
          description: "Name of Keygroup"
          required: true
          type: "string"
          format: "string"
        - in: "path"
          name: "item_id"
          description: "ID of item to update"
          required: true
          type: "string"
          format: "string"

    put:
      tags:
        - "data"
      summary: "Sets an item value in a Keygroup"
      description: "Sets the value of item `item_id` in Keygroup with the name `group_id` to the provided value."
      consumes:
        - "text/plain"
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: OK
        400:
          description: Bad Request, the request is malformed
          schema:
            $ref: "#/definitions/Error"
        404:
          description: Not Found, keygroup could not be found
          schema:
            $ref: "#/definitions/Error"
        409:
          description: Conflict, item could not be updated
          schema:
            $ref: "#/definitions/Error"
      parameters:
        - in: "path"
          name: "group_id"
          description: "Name of Keygroup"
          required: true
          type: "string"
          format: "string"
        - in: "path"
          name: "item_id"
          description: "ID of item to update"
          required: true
          type: "string"
          format: "string"
        - in: "body"
          name: "body"
          description: "Data that should be saved in this item."
          required: true
          schema:
            $ref: "#/definitions/Item"

    delete:
      tags:
        - "data"
      summary: "Deletes an item value from a Keygroup"
      description: "Deletes the value of item `item_id` in Keygroup with the name `group_id`."
      produces:
        - "application/json"
      responses:
        200:
          description: OK
        404:
          description: The item ID or Keygroup could not be found
          schema:
            $ref: "#/definitions/Error"
      parameters:
        - in: "path"
          name: "group_id"
          description: "Name of Keygroup"
          required: true
          type: "string"
          format: "string"
        - in: "path"
          name: "item_id"
          description: "ID of item to update"
          required: true
          type: "string"
          format: "string"

  /replica:
    get:
      tags:
        - "replication"
      summary: "Gets all Replica Nodes"
      description: "Returns all known replica nodes."
      produces:
        - "application/json"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/ReplicationList"

  /replica/{node_id}:
    get:
      tags:
        - "replication"
      summary: "Gets a Replica Node"
      description: "Returns the replica node `node_id` if it exists."
      produces:
        - "application/json"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Node"
        404:
          description: Replica Node not found
          schema:
            $ref: "#/definitions/Error"
      parameters:
        - in: "path"
          name: "node_id"
          description: "ID of node to return"
          required: true
          type: "string"
          format: "string"

    delete:
      tags:
        - "replication"
      summary: "Remove an existing replica node"
      description: "Removes the replica node `node_id` if it exists."
      produces:
        - "text/plain"
        - "application/json"
      responses:
        200:
          description: OK
        404:
          description: Replica Node not found
          schema:
            $ref: "#/definitions/Error"
      parameters:
        - in: "path"
          name: "node_id"
          description: "ID of node to delete"
          required: true
          type: "string"
          format: "string"

definitions:
  Item:
    type: "object"
    required:
      - "id"
      - "type"
      - "attributes"
    properties:
      id:
        type: "string"
        format: "utf-8"
        example: hello
      value:
        type: "string"
        format: "utf-8"
        example: Hello World!
      keygroup:
        type: "string"
        format: "utf-8"
        example: Test-Keygroup
    example:
      id: hello
      value: Hello World!
      keygroup: Test-Keygroup
  Replica:
    type: "object"
    required:
      - "nodes"
    properties:
      nodes:
        type: "array"
        items:
          $ref: "#/definitions/Node"
    example:
      nodes:
        - id: nodeB
          addr: 172.12.0.3
          zmqPort: 5555
        - id: nodeC
          addr: nodeC.nodes.mcc-f.red
          zmqPort: 5554
        - id: nodeD
          addr: localhost
          zmqPort: 5553
  Node:
    type: "object"
    required:
      - "id"
      - "addr"
      - "zmqPort"
    properties:
      id:
        type: "string"
        format: "utf-8"
        example: nodeA
      addr:
        type: "string"
        format: "utf-8"
        example: 172.12.0.3
      zmqPort:
        type: "integer"
        example: 5555
  Error:
    type: "object"
    required:
      - "error"
    properties:
      error:
        type: "string"
        format: "utf-8"
        example: "object not found"
  ReplicationList:
    type: "object"
    required:
      - "nodes"
    properties:
      nodes:
        type: "array"
        items:
          type: "string"
          format: "utf-8"
          example: nodeA
    example:
      nodes:
        - nodeB
        - nodeC
        - nodeD