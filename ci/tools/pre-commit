#!/bin/bash

RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# ---------------------------------------- UPDATE PRE-COMMIT HOOK -------------------------------------------------

if [ ./.git/hooks/pre-commit -ot ./ci/tools/pre-commit ]; then
  cp ./ci/tools/pre-commit ./.git/hooks/pre-commit
  chmod +x ./.git/hooks/pre-commit
  echo -e "${RED}Pre-commit hook not up-to-date, updated now. Please try to commit again.${NC}"
  exit 1
fi

# -------------------------------------- CHECK FOR AWS ACCESS KEYS ------------------------------------------------

echo -e "${YELLOW}Checking for AWS access keys...${NC}"

if git rev-parse --verify HEAD >/dev/null 2>&1
then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    EMPTY_TREE=$(git hash-object -t tree /dev/null)
    against=$EMPTY_TREE
fi

# Redirect output to stderr.
exec 1>&2

# Check changed files for an AWS keys
FILES=$(git diff --cached --name-only "$against")

if [ -n "$FILES" ]; then
    KEY_ID=$(grep -E --line-number '[^A-Z0-9][A-Z0-9]{20}[^A-Z0-9]' "$FILES")
    KEY=$(grep -E --line-number '[^A-Za-z0-9/+=][A-Za-z0-9/+=]{40}[^A-Za-z0-9/+=]' "$FILES")

    if [ -n "$KEY_ID" ] || [ -n "$KEY" ]; then
        exec < /dev/tty # Capture input
        echo "=========== Possible AWS Access Key IDs ==========="
        echo "${KEY_ID}"
        echo ""

        echo "=========== Possible AWS Secret Access Keys ==========="
        echo "${KEY}"
        echo ""

        while true; do
            read -r -p "[AWS Key Check] Possible AWS keys found. Commit files anyway? (y/N) " yn
            if [ "$yn" = "" ]; then
                yn='N'
            fi
            case $yn in
                [Yy] ) break;;
                [Nn] ) exit 1;;
                * ) echo "Please answer y or n for yes or no.";;
            esac
        done
        exec <&- # Release input
    fi
fi

echo -e "${GREEN}No AWS access keys found!${NC}"

# --------------------------------------- PREVENT PUSH TO MAIN -----------------------------------------------------

echo -e "${YELLOW}Checking if you're trying to commit to main...${NC}"

branch=$(git rev-parse --abbrev-ref HEAD)

if [ "$branch" = "main" ]; then
  echo -e "You can't commit directly to '${branch}' branch" # webstorm or intellij will show this as popup
  exit 1 # if you remove this line then it won't block commit but send message to group and on command line
fi

echo -e "${GREEN}You're not trying to commit to main!${NC}"

# ------------------------------------------- GO LINT -------------------------------------------------------------

echo -e "${YELLOW}Linting your code...${NC}"

if ! make lint; then
  echo -e "${RED}Linter found mistakes!${NC}"
  exit 1
fi

echo -e "${GREEN}Linter did not find mistakes!${NC}"

# ------------------------------------ INFORM ABOUT 3NODETEST ------------------------------------------------------

echo -e "${RED}Be sure to run the complete 3NodeTest before you open up a merge request!${NC}"