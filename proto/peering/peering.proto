syntax = "proto3";

package mcc.fred.peering;
option go_package = ".;peering";

// Represents another node
service Node {
    rpc CreateKeygroup (CreateKeygroupRequest) returns (Empty);
    rpc DeleteKeygroup (DeleteKeygroupRequest) returns (Empty);
    rpc PutItem (PutItemRequest) returns (Empty);
    rpc AppendItem (AppendItemRequest) returns (Empty);
    rpc GetItem (GetItemRequest) returns (GetItemResponse);
    rpc GetAllItems (GetAllItemsRequest) returns (GetAllItemsResponse);
}

message Empty{}

message CreateKeygroupRequest {
    string keygroup = 1;
    int64 expiry = 2;
}

message DeleteKeygroupRequest {
    string keygroup = 1;
}

message PutItemRequest {
    string keygroup = 1;
    string id = 2;
    string val = 3;
    bool tombstoned = 4;
    map<string, uint64> version = 5;
}

message GetItemRequest {
    string keygroup = 1;
    string id = 2;
}

message GetItemResponse {
    repeated Data data = 1;
}

message GetAllItemsRequest {
    string keygroup = 1;
}

message GetAllItemsResponse {
    repeated Data data = 1;
}

message Data {
    string id = 1;
    string val = 2;
    map<string, uint64> version = 3;
}

message UpdateItemRequest {
    string keygroup = 1;
    string id = 2;
    string val = 3;
    map<string, uint64> version = 4;
}

message AppendItemRequest {
    string keygroup = 1;
    string id = 2;
    string data = 3;
}