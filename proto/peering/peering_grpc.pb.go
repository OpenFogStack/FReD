// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: peering.proto

package peering

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeClient interface {
	CreateKeygroup(ctx context.Context, in *CreateKeygroupRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteKeygroup(ctx context.Context, in *DeleteKeygroupRequest, opts ...grpc.CallOption) (*Empty, error)
	PutItem(ctx context.Context, in *PutItemRequest, opts ...grpc.CallOption) (*Empty, error)
	StreamPut(ctx context.Context, opts ...grpc.CallOption) (Node_StreamPutClient, error)
	GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*ItemResponse, error)
	GetAllItems(ctx context.Context, in *GetAllItemsRequest, opts ...grpc.CallOption) (Node_GetAllItemsClient, error)
}

type nodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeClient(cc grpc.ClientConnInterface) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) CreateKeygroup(ctx context.Context, in *CreateKeygroupRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/mcc.fred.peering.Node/CreateKeygroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) DeleteKeygroup(ctx context.Context, in *DeleteKeygroupRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/mcc.fred.peering.Node/DeleteKeygroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) PutItem(ctx context.Context, in *PutItemRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/mcc.fred.peering.Node/PutItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) StreamPut(ctx context.Context, opts ...grpc.CallOption) (Node_StreamPutClient, error) {
	stream, err := c.cc.NewStream(ctx, &Node_ServiceDesc.Streams[0], "/mcc.fred.peering.Node/StreamPut", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeStreamPutClient{stream}
	return x, nil
}

type Node_StreamPutClient interface {
	Send(*PutItemRequest) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type nodeStreamPutClient struct {
	grpc.ClientStream
}

func (x *nodeStreamPutClient) Send(m *PutItemRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeStreamPutClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*ItemResponse, error) {
	out := new(ItemResponse)
	err := c.cc.Invoke(ctx, "/mcc.fred.peering.Node/GetItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetAllItems(ctx context.Context, in *GetAllItemsRequest, opts ...grpc.CallOption) (Node_GetAllItemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Node_ServiceDesc.Streams[1], "/mcc.fred.peering.Node/GetAllItems", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeGetAllItemsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Node_GetAllItemsClient interface {
	Recv() (*ItemResponse, error)
	grpc.ClientStream
}

type nodeGetAllItemsClient struct {
	grpc.ClientStream
}

func (x *nodeGetAllItemsClient) Recv() (*ItemResponse, error) {
	m := new(ItemResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NodeServer is the server API for Node service.
// All implementations should embed UnimplementedNodeServer
// for forward compatibility
type NodeServer interface {
	CreateKeygroup(context.Context, *CreateKeygroupRequest) (*Empty, error)
	DeleteKeygroup(context.Context, *DeleteKeygroupRequest) (*Empty, error)
	PutItem(context.Context, *PutItemRequest) (*Empty, error)
	StreamPut(Node_StreamPutServer) error
	GetItem(context.Context, *GetItemRequest) (*ItemResponse, error)
	GetAllItems(*GetAllItemsRequest, Node_GetAllItemsServer) error
}

// UnimplementedNodeServer should be embedded to have forward compatible implementations.
type UnimplementedNodeServer struct {
}

func (UnimplementedNodeServer) CreateKeygroup(context.Context, *CreateKeygroupRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeygroup not implemented")
}
func (UnimplementedNodeServer) DeleteKeygroup(context.Context, *DeleteKeygroupRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKeygroup not implemented")
}
func (UnimplementedNodeServer) PutItem(context.Context, *PutItemRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutItem not implemented")
}
func (UnimplementedNodeServer) StreamPut(Node_StreamPutServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPut not implemented")
}
func (UnimplementedNodeServer) GetItem(context.Context, *GetItemRequest) (*ItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedNodeServer) GetAllItems(*GetAllItemsRequest, Node_GetAllItemsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllItems not implemented")
}

// UnsafeNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServer will
// result in compilation errors.
type UnsafeNodeServer interface {
	mustEmbedUnimplementedNodeServer()
}

func RegisterNodeServer(s grpc.ServiceRegistrar, srv NodeServer) {
	s.RegisterService(&Node_ServiceDesc, srv)
}

func _Node_CreateKeygroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeygroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).CreateKeygroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcc.fred.peering.Node/CreateKeygroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).CreateKeygroup(ctx, req.(*CreateKeygroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_DeleteKeygroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeygroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).DeleteKeygroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcc.fred.peering.Node/DeleteKeygroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).DeleteKeygroup(ctx, req.(*DeleteKeygroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_PutItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).PutItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcc.fred.peering.Node/PutItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).PutItem(ctx, req.(*PutItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_StreamPut_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeServer).StreamPut(&nodeStreamPutServer{stream})
}

type Node_StreamPutServer interface {
	SendAndClose(*Empty) error
	Recv() (*PutItemRequest, error)
	grpc.ServerStream
}

type nodeStreamPutServer struct {
	grpc.ServerStream
}

func (x *nodeStreamPutServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeStreamPutServer) Recv() (*PutItemRequest, error) {
	m := new(PutItemRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Node_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcc.fred.peering.Node/GetItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetItem(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetAllItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllItemsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServer).GetAllItems(m, &nodeGetAllItemsServer{stream})
}

type Node_GetAllItemsServer interface {
	Send(*ItemResponse) error
	grpc.ServerStream
}

type nodeGetAllItemsServer struct {
	grpc.ServerStream
}

func (x *nodeGetAllItemsServer) Send(m *ItemResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Node_ServiceDesc is the grpc.ServiceDesc for Node service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Node_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mcc.fred.peering.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKeygroup",
			Handler:    _Node_CreateKeygroup_Handler,
		},
		{
			MethodName: "DeleteKeygroup",
			Handler:    _Node_DeleteKeygroup_Handler,
		},
		{
			MethodName: "PutItem",
			Handler:    _Node_PutItem_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _Node_GetItem_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamPut",
			Handler:       _Node_StreamPut_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetAllItems",
			Handler:       _Node_GetAllItems_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "peering.proto",
}
