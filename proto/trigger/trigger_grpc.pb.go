// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: trigger.proto

package trigger

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TriggerNodeClient is the client API for TriggerNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TriggerNodeClient interface {
	PutItemTrigger(ctx context.Context, in *PutItemTriggerRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteItemTrigger(ctx context.Context, in *DeleteItemTriggerRequest, opts ...grpc.CallOption) (*Empty, error)
}

type triggerNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewTriggerNodeClient(cc grpc.ClientConnInterface) TriggerNodeClient {
	return &triggerNodeClient{cc}
}

func (c *triggerNodeClient) PutItemTrigger(ctx context.Context, in *PutItemTriggerRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/mcc.fred.trigger.TriggerNode/PutItemTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerNodeClient) DeleteItemTrigger(ctx context.Context, in *DeleteItemTriggerRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/mcc.fred.trigger.TriggerNode/DeleteItemTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TriggerNodeServer is the server API for TriggerNode service.
// All implementations should embed UnimplementedTriggerNodeServer
// for forward compatibility
type TriggerNodeServer interface {
	PutItemTrigger(context.Context, *PutItemTriggerRequest) (*Empty, error)
	DeleteItemTrigger(context.Context, *DeleteItemTriggerRequest) (*Empty, error)
}

// UnimplementedTriggerNodeServer should be embedded to have forward compatible implementations.
type UnimplementedTriggerNodeServer struct {
}

func (UnimplementedTriggerNodeServer) PutItemTrigger(context.Context, *PutItemTriggerRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutItemTrigger not implemented")
}
func (UnimplementedTriggerNodeServer) DeleteItemTrigger(context.Context, *DeleteItemTriggerRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItemTrigger not implemented")
}

// UnsafeTriggerNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TriggerNodeServer will
// result in compilation errors.
type UnsafeTriggerNodeServer interface {
	mustEmbedUnimplementedTriggerNodeServer()
}

func RegisterTriggerNodeServer(s grpc.ServiceRegistrar, srv TriggerNodeServer) {
	s.RegisterService(&TriggerNode_ServiceDesc, srv)
}

func _TriggerNode_PutItemTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutItemTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerNodeServer).PutItemTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcc.fred.trigger.TriggerNode/PutItemTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerNodeServer).PutItemTrigger(ctx, req.(*PutItemTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerNode_DeleteItemTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerNodeServer).DeleteItemTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcc.fred.trigger.TriggerNode/DeleteItemTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerNodeServer).DeleteItemTrigger(ctx, req.(*DeleteItemTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TriggerNode_ServiceDesc is the grpc.ServiceDesc for TriggerNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TriggerNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mcc.fred.trigger.TriggerNode",
	HandlerType: (*TriggerNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutItemTrigger",
			Handler:    _TriggerNode_PutItemTrigger_Handler,
		},
		{
			MethodName: "DeleteItemTrigger",
			Handler:    _TriggerNode_DeleteItemTrigger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trigger.proto",
}
