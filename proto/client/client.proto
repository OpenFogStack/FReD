syntax = "proto3";

package mcc.fred.client;
option go_package = ".;client";

// This is a Client that calls the exthandler of FReD
service Client {
  rpc CreateKeygroup (CreateKeygroupRequest) returns (Empty);
  rpc DeleteKeygroup (DeleteKeygroupRequest) returns (Empty);
  rpc Read (ReadRequest) returns (ReadResponse);
  rpc Scan (ScanRequest) returns (ScanResponse);
  rpc Update (UpdateRequest) returns (UpdateResponse);
  rpc Delete (DeleteRequest) returns (DeleteResponse);
  rpc Append (AppendRequest) returns (AppendResponse);
  rpc AddReplica (AddReplicaRequest) returns (Empty);
  rpc GetKeygroupInfo (GetKeygroupInfoRequest) returns (GetKeygroupInfoResponse);
  rpc RemoveReplica (RemoveReplicaRequest) returns (Empty);
  rpc GetReplica (GetReplicaRequest) returns (GetReplicaResponse);
  rpc GetAllReplica (Empty) returns (GetAllReplicaResponse);
  rpc GetKeygroupTriggers (GetKeygroupTriggerRequest) returns (GetKeygroupTriggerResponse);
  rpc AddTrigger (AddTriggerRequest) returns (Empty);
  rpc RemoveTrigger (RemoveTriggerRequest) returns (Empty);
  rpc AddUser (AddUserRequest) returns (Empty);
  rpc RemoveUser (RemoveUserRequest) returns (Empty);
}

enum UserRole {
  ReadKeygroup = 0 ;
  WriteKeygroup = 1;
  ConfigureReplica = 2;
  ConfigureTrigger = 3 ;
  ConfigureKeygroups = 4;
}

message Empty{}

message Version{
  map<string, uint64> version = 1;
}

message CreateKeygroupRequest {
  string keygroup = 1;
  bool mutable = 2;
  int64 expiry = 3;
}

message DeleteKeygroupRequest {
  string keygroup = 1;
}

message ReadRequest {
  string keygroup = 1;
  string id = 2;
  repeated Version versions = 3;
}

message Item  {
  string id = 1;
  string val = 2;
  Version version = 3;
}

message ReadResponse {
  repeated Item data = 1;
}

message ScanRequest {
  string keygroup = 1;
  string id = 2;
  uint64 count = 3;
}

message ScanResponse {
    repeated Item data = 1;
}

message UpdateRequest {
  string keygroup = 1;
  string id = 2;
  string data = 3;
  repeated Version versions = 4;
}

message UpdateResponse {
  Version version = 1;
}

message AppendRequest {
  string keygroup = 1;
  uint64 id = 2;
  string data = 3;
}

message AppendResponse {
  string id = 1;
}

message DeleteRequest {
  string keygroup = 1;
  string id = 2;
  repeated Version versions = 3;
}

message DeleteResponse {
  Version version = 1;
}

message AddReplicaRequest {
  string keygroup = 1;
  string nodeId = 2;
  int64 expiry = 3;
}

message GetKeygroupInfoRequest {
  string keygroup = 1;
}

message GetKeygroupInfoResponse {
  bool mutable = 1;
  repeated KeygroupReplica replica = 2;
}

message KeygroupReplica {
  string nodeId = 1;
  int64 expiry = 2;
  string host = 3;
}

message RemoveReplicaRequest {
  string keygroup = 1;
  string nodeId = 2;
}

message GetReplicaRequest {
  string nodeId = 1;
}

message GetReplicaResponse {
  string nodeId = 1;
  string host = 2;
}

message Replica {
  string nodeId = 1;
  string host = 2;
}

message GetAllReplicaResponse {
  repeated Replica replicas = 1;
}

message GetKeygroupTriggerRequest {
  string keygroup = 1;
}

message GetKeygroupTriggerResponse {
  repeated Trigger triggers = 1;
}

message Trigger {
  string id = 1;
  string host = 2;
}

message AddTriggerRequest {
  string keygroup = 1;
  string triggerId = 2;
  string triggerHost = 3;
}

message RemoveTriggerRequest {
  string keygroup = 1;
  string triggerId = 2;
}

message AddUserRequest {
  string user = 1;
  string keygroup = 2;
  UserRole role = 3;
}

message RemoveUserRequest {
  string user = 1;
  string keygroup = 2;
  UserRole role = 3;
}