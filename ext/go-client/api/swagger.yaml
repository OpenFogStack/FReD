---
swagger: "2.0"
info:
  description: "FReD - Fog Replicated Data Storage."
  version: "0.0.4"
  title: "FReD"
  contact:
    email: "tp@mcc.tu-berlin.de"
  license:
    name: "MIT"
    url: "https://mit-license.org/"
host: "[node-id].nodes.mcc-f.red"
basePath: "/v0"
tags:
- name: "keygroup"
  description: "contains all keygroups"
- name: "data"
  description: "all data of a particular keygroup"
- name: "seed"
  description: "set up a new P2P network of FReD nodes"
- name: "replication"
  description: "manage replication between nodes"
- name: "triggers"
  description: "manage trigger nodes"
schemes:
- "https"
- "http"
paths:
  /keygroup/{group_id}:
    post:
      tags:
      - "keygroup"
      summary: "Create a new Keygroup"
      description: "Creates a new Keygroup with the name `group_id` if it does not\
        \ exist already."
      produces:
      - "text/plain"
      - "application/json"
      parameters:
      - name: "group_id"
        in: "path"
        description: "Name of Keygroup"
        required: true
        type: "string"
        format: "string"
        x-exportParamName: "GroupId"
      - in: "body"
        name: "body"
        description: "Type of keygroup to create (true for mutable table or false\
          \ for append-only log) and expiration of items on this replica in seconds\
          \ (if <=0, data will not expire)"
        required: true
        schema:
          $ref: "#/definitions/body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
        "409":
          description: "Conflict, Keygroup exists already"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "keygroup"
      summary: "Delete an existing Keygroup"
      description: "Deletes the Keygroup with the name `group_id` if it exists."
      produces:
      - "text/plain"
      - "application/json"
      parameters:
      - name: "group_id"
        in: "path"
        description: "Name of Keygroup"
        required: true
        type: "string"
        format: "string"
        x-exportParamName: "GroupId"
      responses:
        "200":
          description: "OK"
        "404":
          description: "Keygroup not found"
          schema:
            $ref: "#/definitions/Error"
  /keygroup/{group_id}/replica:
    get:
      tags:
      - "keygroup"
      - "replication"
      summary: "Gets all Replica Nodes for a Keygroup"
      description: "Returns replica nodes for a Keygroup with the name `group_id`."
      produces:
      - "text/plain"
      - "application/json"
      parameters:
      - name: "group_id"
        in: "path"
        description: "Name of Keygroup"
        required: true
        type: "string"
        format: "string"
        x-exportParamName: "GroupId"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ReplicationList"
        "404":
          description: "Keygroup not Found"
          schema:
            $ref: "#/definitions/Error"
  /keygroup/{group_id}/replica/{node_id}:
    post:
      tags:
      - "keygroup"
      - "replication"
      summary: "Create a new Replica node for a Keygroup"
      description: "Registers the node with the name `node_id` as a replica node for\
        \ a Keygroup with the name `group_id` if it does not exist already."
      produces:
      - "text/plain"
      - "application/json"
      parameters:
      - name: "group_id"
        in: "path"
        description: "Name of Keygroup"
        required: true
        type: "string"
        format: "string"
        x-exportParamName: "GroupId"
      - name: "node_id"
        in: "path"
        description: "Name of Replica Node"
        required: true
        type: "string"
        format: "string"
        x-exportParamName: "NodeId"
      - in: "body"
        name: "body"
        description: "Parameters for keygroup replication on this node, namely expiration\
          \ of items on this replica in seconds (if <=0, data will not expire)"
        required: true
        schema:
          $ref: "#/definitions/body_1"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
        "409":
          description: "Conflict, Replica Node or Keygroup exists already"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "keygroup"
      - "replication"
      summary: "Remove an existing replica node for a Keygroup"
      description: "De-registers the node with the name {node_id} as a replica node\
        \ for the Keygroup with the name `group_id` if it exists."
      produces:
      - "text/plain"
      - "application/json"
      parameters:
      - name: "group_id"
        in: "path"
        description: "Name of Keygroup"
        required: true
        type: "string"
        format: "string"
        x-exportParamName: "GroupId"
      - name: "node_id"
        in: "path"
        description: "Name of Replica Node"
        required: true
        type: "string"
        format: "string"
        x-exportParamName: "NodeId"
      responses:
        "200":
          description: "OK"
        "404":
          description: "Replica Node or Keygroup not found"
          schema:
            $ref: "#/definitions/Error"
  /keygroup/{group_id}/data/{item_id}:
    get:
      tags:
      - "data"
      summary: "Gets an item value from a Keygroup"
      description: "Gets the value of item `item_id` in Keygroup with the name `group_id`."
      produces:
      - "application/json"
      parameters:
      - name: "group_id"
        in: "path"
        description: "Name of Keygroup"
        required: true
        type: "string"
        format: "string"
        x-exportParamName: "GroupId"
      - name: "item_id"
        in: "path"
        description: "ID of item to update"
        required: true
        type: "string"
        format: "string"
        x-exportParamName: "ItemId"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Item"
        "404":
          description: "The item ID or Keygroup could not be found"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
      - "data"
      summary: "Sets an item value in a Keygroup"
      description: "Sets the value of item `item_id` in Keygroup with the name `group_id`\
        \ to the provided value."
      consumes:
      - "text/plain"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "group_id"
        in: "path"
        description: "Name of Keygroup"
        required: true
        type: "string"
        format: "string"
        x-exportParamName: "GroupId"
      - name: "item_id"
        in: "path"
        description: "ID of item to update"
        required: true
        type: "string"
        format: "string"
        x-exportParamName: "ItemId"
      - in: "body"
        name: "body"
        description: "Data that should be saved in this item."
        required: true
        schema:
          $ref: "#/definitions/Item"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request, the request is malformed"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found, keygroup could not be found"
          schema:
            $ref: "#/definitions/Error"
        "409":
          description: "Conflict, item could not be updated"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "data"
      summary: "Deletes an item value from a Keygroup"
      description: "Deletes the value of item `item_id` in Keygroup with the name\
        \ `group_id`."
      produces:
      - "application/json"
      parameters:
      - name: "group_id"
        in: "path"
        description: "Name of Keygroup"
        required: true
        type: "string"
        format: "string"
        x-exportParamName: "GroupId"
      - name: "item_id"
        in: "path"
        description: "ID of item to update"
        required: true
        type: "string"
        format: "string"
        x-exportParamName: "ItemId"
      responses:
        "200":
          description: "OK"
        "404":
          description: "The item ID or Keygroup could not be found"
          schema:
            $ref: "#/definitions/Error"
  /replica:
    get:
      tags:
      - "replication"
      summary: "Gets all Replica Nodes"
      description: "Returns all known replica nodes."
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ReplicationList"
  /replica/{node_id}:
    get:
      tags:
      - "replication"
      summary: "Gets a Replica Node"
      description: "Returns the replica node `node_id` if it exists."
      produces:
      - "application/json"
      parameters:
      - name: "node_id"
        in: "path"
        description: "ID of node to return"
        required: true
        type: "string"
        format: "string"
        x-exportParamName: "NodeId"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Node"
        "404":
          description: "Replica Node not found"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "replication"
      summary: "Remove an existing replica node"
      description: "Removes the replica node `node_id` if it exists."
      produces:
      - "text/plain"
      - "application/json"
      parameters:
      - name: "node_id"
        in: "path"
        description: "ID of node to delete"
        required: true
        type: "string"
        format: "string"
        x-exportParamName: "NodeId"
      responses:
        "200":
          description: "OK"
        "404":
          description: "Replica Node not found"
          schema:
            $ref: "#/definitions/Error"
  /keygroup/{group_id}/triggers:
    get:
      tags:
      - "triggers"
      summary: "Gets all Trigger Nodes for a Keygroup"
      description: "Returns trigger nodes for a Keygroup with the name `group_id`."
      produces:
      - "text/plain"
      - "application/json"
      parameters:
      - name: "group_id"
        in: "path"
        description: "Name of Keygroup"
        required: true
        type: "string"
        format: "string"
        x-exportParamName: "GroupId"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/TriggerList"
        "404":
          description: "Keygroup not Found"
          schema:
            $ref: "#/definitions/Error"
  /keygroup/{group_id}/triggers/{trigger_node_id}:
    post:
      tags:
      - "triggers"
      summary: "Create a new Trigger node for a Keygroup"
      description: "Registers the trigger node with the name `trigger_node_id` and\
        \ host `host` as a trigger node for a Keygroup with the name `group_id` if\
        \ it does not exist already."
      produces:
      - "text/plain"
      - "application/json"
      parameters:
      - name: "group_id"
        in: "path"
        description: "Name of Keygroup"
        required: true
        type: "string"
        format: "string"
        x-exportParamName: "GroupId"
      - name: "trigger_node_id"
        in: "path"
        description: "Name of Trigger Node"
        required: true
        type: "string"
        format: "string"
        x-exportParamName: "TriggerNodeId"
      - in: "body"
        name: "host"
        description: "Host of the trigger node"
        required: true
        schema:
          $ref: "#/definitions/TriggerNode"
        x-exportParamName: "Host"
      responses:
        "200":
          description: "OK"
        "409":
          description: "Conflict, Trigger Node or Keygroup exists already"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "triggers"
      summary: "Remove an existing trigger node for a Keygroup"
      description: "De-registers the node with the name {trigger_node_id} as a trigger\
        \ node for the Keygroup with the name `group_id` if it exists."
      produces:
      - "text/plain"
      - "application/json"
      parameters:
      - name: "group_id"
        in: "path"
        description: "Name of Keygroup"
        required: true
        type: "string"
        format: "string"
        x-exportParamName: "GroupId"
      - name: "trigger_node_id"
        in: "path"
        description: "Name of Trigger Node"
        required: true
        type: "string"
        format: "string"
        x-exportParamName: "TriggerNodeId"
      responses:
        "200":
          description: "OK"
        "404":
          description: "Trigger Node or Keygroup not found"
          schema:
            $ref: "#/definitions/Error"
definitions:
  Item:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "string"
        format: "utf-8"
        example: "hello"
      value:
        type: "string"
        format: "utf-8"
        example: "Hello World!"
      keygroup:
        type: "string"
        format: "utf-8"
        example: "Test-Keygroup"
    example:
      id: "hello"
      value: "Hello World!"
      keygroup: "Test-Keygroup"
  TriggerNode:
    type: "object"
    required:
    - "host"
    properties:
      host:
        type: "string"
        format: "utf-8"
        example: "172.26.0.2:3333"
  Node:
    type: "object"
    required:
    - "addr"
    - "id"
    - "zmqPort"
    properties:
      id:
        type: "string"
        format: "utf-8"
        example: "nodeA"
      addr:
        type: "string"
        format: "utf-8"
        example: "172.12.0.3"
      zmqPort:
        type: "integer"
        example: 5555
    example:
      zmqPort: 5555
      id: "nodeA"
      addr: "172.12.0.3"
  Error:
    type: "object"
    required:
    - "error"
    properties:
      error:
        type: "string"
        format: "utf-8"
        example: "object not found"
  ReplicationList:
    type: "object"
    required:
    - "nodes"
    properties:
      nodes:
        type: "array"
        items:
          $ref: "#/definitions/ReplicationList_nodes"
    example:
      nodes:
        nodeB:
          id: "nodeB"
          expiry: 0
        nodeC:
          id: "nodeC"
          expiry: 300
        nodeD:
          id: "nodeD"
          expiry: 3600
  TriggerList:
    type: "object"
    required:
    - "nodes"
    properties:
      nodes:
        type: "array"
        items:
          $ref: "#/definitions/TriggerList_nodes"
    example:
      nodes:
      - host: "172.12.0.3:3333"
        id: "triggernodeA"
      - host: "172.12.0.3:3333"
        id: "triggernodeA"
  body:
    type: "object"
    required:
    - "expiry"
    - "mutable"
    properties:
      mutable:
        type: "boolean"
        example: false
      expiry:
        type: "number"
        example: 0
  body_1:
    type: "object"
    required:
    - "expiry"
    properties:
      expiry:
        type: "number"
        example: 0
  ReplicationList_nodes:
    type: "object"
    required:
    - "expiry"
    - "id"
    properties:
      id:
        type: "string"
        format: "utf-8"
        example: "nodeA"
      expiry:
        type: "number"
        example: 0
  TriggerList_nodes:
    type: "object"
    required:
    - "host"
    - "id"
    properties:
      id:
        type: "string"
        format: "utf-8"
        example: "triggernodeA"
      host:
        type: "string"
        format: "utf-8"
        example: "172.12.0.3:3333"
    example:
      host: "172.12.0.3:3333"
      id: "triggernodeA"
